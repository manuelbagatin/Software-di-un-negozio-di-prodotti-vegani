# -*- coding: utf-8 -*-
"""Progetto Software negozio di alimentari.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1twnxBLnF2-x-YQCs2wBSV0Hs98exYA1B
"""

import csv, os

def help():

  """
  "aiuto" command

  """
  print("I comandi disponibili sono i seguenti: ")
  print("- aggiungi: aggiungi un prodotto al magazzino")
  print("- elenca: elenca i prodotto in magazzino")
  print("- vendita: registra una vendita effettuata")
  print("- profitti: mostra i profitti totali")
  print("- aiuto: mostra i possibili comandi")
  print("- chiudi: esci dal programma")

def insert_command():

    """
    command input

    """
    command = input("Inserisci un comando: ").lower()
    return command

def create_csv_catalogue():

   """
   creation of the catalogue file

   """
   with open("catalogo_negozio.csv", "a", newline='') as catalogue_file:
        csv_writer = csv.writer(catalogue_file)
        csv_writer.writerow(["Prodotto", "Quantità", "Prezzo di Acquisto", "Prezzo di Vendita"])

def create_csv_profits():

   """
   creation of the profits file

   """
   with open("profitti_negozio.csv", "a", newline='') as profits_file:
        csv_writer = csv.writer(profits_file)
        csv_writer.writerow(["Profitto Lordo", "Profitto Netto"])
        csv_writer.writerow([0,0])

def insert_row_catalogue(name_product,amount,purchase_price,selling_price):

  """
  add product to the catalogue file

  """
  with open("catalogo_negozio.csv", "a", newline='') as catalogue_file:
        csv_writer = csv.writer(catalogue_file)
        csv_writer.writerow([name_product,amount,purchase_price,selling_price])

def list_product():

   """
   print catalogue products

   """
   with open("catalogo_negozio.csv") as csv_file:
          csv_reader = csv.DictReader(csv_file)
          print("PRODOTTO", "QUANTITÀ", "PREZZO")
          print("\n")
          for row in csv_reader:
            if int(row["Quantità"]) == 0:
              pass
            else:
              print("%s %s €%s" % (row["Prodotto"],row["Quantità"],row ["Prezzo di Vendita"]))

def edit_csv_catalogue(name_product,amount):

  """
  change the quantity of a product in the catalogue file

  """

  file_c = open("catalogo_negozio.csv", "r")
  dt = csv.DictReader(file_c)
  up_dt = []
  for r in dt:
    if r["Prodotto"] == name_product:
      row = {'Prodotto': r['Prodotto'],
           'Quantità': int(r['Quantità'])+amount,
           'Prezzo di Acquisto': r['Prezzo di Acquisto'],
           'Prezzo di Vendita': r['Prezzo di Vendita']}
      up_dt.append(row)
    else:
      row = {'Prodotto': r['Prodotto'],
           'Quantità': (r['Quantità']),
           'Prezzo di Acquisto': r['Prezzo di Acquisto'],
           'Prezzo di Vendita': r['Prezzo di Vendita']}
      up_dt.append(row)

  file_c.close()
  file_c = open("catalogo_negozio.csv", "w", newline='')
  headers = ['Prodotto', 'Quantità', 'Prezzo di Acquisto', 'Prezzo di Vendita']
  data = csv.DictWriter(file_c, delimiter=',', fieldnames=headers)
  data.writerow(dict((heads, heads) for heads in headers))
  data.writerows(up_dt)

  file_c.close()

def edit_csv_profits(gross_profit,net_profit):

  """
  edit the profits file

  """

  file_c = open("profitti_negozio.csv", "r")
  dt = csv.DictReader(file_c)
  up_dt = []
  for r in dt:
      row = {'Profitto Lordo': float(r['Profitto Lordo']) +gross_profit,
           'Profitto Netto': float(r['Profitto Netto'])+net_profit}
      up_dt.append(row)

  file_c.close()
  file_c = open("profitti_negozio.csv", "w", newline='')
  headers = ['Profitto Lordo', 'Profitto Netto']
  data = csv.DictWriter(file_c, delimiter=',', fieldnames=headers)
  data.writerow(dict((heads, heads) for heads in headers))
  data.writerows(up_dt)

  file_c.close()

def dict_catalogue():

  """
  creation and recall of a dictionary about catalogue file information

  """
  catalogo = {}
  with open("catalogo_negozio.csv") as csv_file:
          csv_reader = csv.DictReader(csv_file)
          for row in csv_reader:
            catalogo[row["Prodotto"]] = {"Quantità":row["Quantità"], "Prezzo di Acquisto": row["Prezzo di Acquisto"], "Prezzo di Vendita":row["Prezzo di Vendita"]}

  return catalogo

def products_in_list():

  """
  creation and recall of catalogue's products list

  """


  with open("catalogo_negozio.csv") as csv_file:
          csv_reader = csv.DictReader(csv_file)
          products = []
          for row in csv_reader:
            products.append(row["Prodotto"])

  return products

def error_case(questions,is_amount):

  """
  output error handling
  """

  while True:

    try:

      question = input(questions)

      if is_amount == "yes":
        assert(not "." in question), "Inserire un numero intero e positivo"

      assert (not "-" in question), "Inserire un numero positivo"

      question = float(question)
      break

    except AssertionError as e:
      print(e)

    except ValueError:
      print("Inserire un numero positivo")


  return question

def sale():

  """
  "vendita" command

  """
  another = "si"
  sale_products = []
  while another == "si":
    name_product = input("Nome del prodotto: ")
    while not name_product in products_in_list():
      print("Prodotto non in elenco, riprovare:")
      name_product = input("Nome del prodotto: ")

    amount = error_case("Quantità : ", "yes")


    while (float(dict_catalogue()[name_product]["Quantità"]) - amount ) < 1:
      print("Non è presente in catalogo una simile quantità di %s" % name_product)
      amount = error_case("Quantità : ","yes")

    edit_csv_catalogue(name_product, - int(amount))

    sale_products.append([name_product, amount, float(dict_catalogue()[name_product]["Prezzo di Vendita"]), round(float(dict_catalogue()[name_product]["Prezzo di Vendita"])*amount, 2)])

    gross_profit = round(float(dict_catalogue()[name_product]["Prezzo di Vendita"])*amount,2)
    net_profit = round(
        gross_profit - (float(dict_catalogue()[name_product]["Prezzo di Acquisto"])*amount), 2)

    edit_csv_profits(gross_profit,net_profit)

    another = input("Aggiungere un altro prodotto ? (si/no): ")
  print("VENDITA REGISTRATA")
  i = 0
  while i<len(sale_products):
    print("%d X %s: €%.2f" % (sale_products[i][1], sale_products[i][0],sale_products[i][2]))
    i+=1

  total = 0
  for n in range(len(sale_products)):
    total += sale_products[n][3]

  print("Totale: €%.2f" % total)

def profits():

  """
  "profitti" command

  """

  with open("profitti_negozio.csv") as csv_file:
          csv_reader = csv.DictReader(csv_file)
          for row in csv_reader:
            print("Profitto: Lordo= €%.2f, Netto= €%.2f" % (float(row["Profitto Lordo"]),float(row["Profitto Netto"])))

def add():
  """
  add products to the catalogue

  """

  name_product = input("Nome del prodotto: ")

  amount = int(error_case("Quantità: ", "yes" ))

  if not "catalogo_negozio.csv" in os.listdir():
        create_csv_catalogue()
  if not name_product in products_in_list():
     purchase_price = float(error_case("Prezzo di Acquisto: ","no"))
     selling_price = float(error_case("Prezzo di Vendita: ", "no"))
     insert_row_catalogue(name_product, amount, purchase_price, selling_price)
  else:
        edit_csv_catalogue(name_product, amount)

  print(f"AGGIUNTO: {amount} X {name_product}")

def program():

  """
  software implementation

  """

  command = None
  while command != "chiudi":
    command = insert_command()

    if command == "aiuto":
      help()


    elif command == "chiudi":
      print("Bye bye")

    elif command == "aggiungi":
      add()


    elif command == "elenca":
      if not "catalogo_negozio.csv" in os.listdir():
        print("Ancora nessun prodotto in elenco")

      else:
        list_product()


    elif command == "vendita":
      if not "profitti_negozio.csv" in os.listdir():
        create_csv_profits()

      sale()


    elif command == "profitti":
      if not "profitti_negozio.csv" in os.listdir():
        print("Nessuna vendita è stata ancora registrata")


      else:
        profits()


    else:
      print("Comando non valido")
      help()

    print ("\n")

program()